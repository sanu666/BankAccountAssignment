package com.capgemini.BankAccountPOJO;

import com.capgemini.BankAccount.Exceptions.AmountExceededEception;
import com.capgemini.BankAccount.Exceptions.AmountTooLowException;

public class BankAccountDetails {
	
	private String userName;//user should be allowed give input for userName, so it can be modified as well
	private int accountId;//acccountId should be autogenerated as it needs to be unique 
	private double accountBalance;//should not have setters as deposit and withdraw should only be able to modify the balance
	private static int accountBalanceAutoGen=0;
	private static int withDrawlLimit=2000;//this should be dynamic, keeping it static for ease of use as for now
	
	
	
	public BankAccountDetails(String userName) {
		accountBalance=0.0;
		accountId=++accountBalanceAutoGen;//some more complex ways could be used to generate the id
		this.userName = userName;
	}
	
	public BankAccountDetails() {
		accountBalance=0.0;
		accountId=++accountBalanceAutoGen;//some more complex ways could be used to generate the id
		userName = "Unknown";
	}

	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public int getAccountId() {
		return accountId;
	}
	public double getAccountBalance() {
		return accountBalance;
	}

	public static int getWithDrawlLimit() {
		return withDrawlLimit;
	}

	public static void setWithDrawlLimit(int withDrawlLimit) {
		BankAccountDetails.withDrawlLimit = withDrawlLimit;
	}
	
	
	public double withdrawAmount(double amount)throws AmountExceededEception
	{
		if(amount>(accountBalance+withDrawlLimit))
			throw new AmountExceededEception();
		else
			accountBalance-=amount;
		return accountBalance;
		
	}
	
	public double depositMoney(double amount)throws AmountTooLowException
	{
		if(amount<0)
			throw new AmountTooLowException();
		else
			accountBalance+=amount;
		return accountBalance;
	}

}
